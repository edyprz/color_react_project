{"ast":null,"code":"import _defineProperty from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/edgar/js/color_project/src/NewPaletteForm.js\";\nimport React, { Component } from \"react\";\nimport PaletteFormNav from './PaletteFormNav';\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport ColorPickerForm from './ColorPickerForm';\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport Button from \"@material-ui/core/Button\";\nimport DraggableColorList from './DraggableColorList';\nimport { arrayMove } from 'react-sortable-hoc';\nimport styles from './styles/NewPaletteFormStyles';\nimport seedColors from './seedColors';\n\nvar NewPaletteForm = /*#__PURE__*/function (_Component) {\n  _inherits(NewPaletteForm, _Component);\n\n  var _super = _createSuper(NewPaletteForm);\n\n  function NewPaletteForm(props) {\n    var _this;\n\n    _classCallCheck(this, NewPaletteForm);\n\n    _this = _super.call(this, props);\n\n    _this.handleDrawerOpen = function () {\n      _this.setState({\n        open: true\n      });\n    };\n\n    _this.handleDrawerClose = function () {\n      _this.setState({\n        open: false\n      });\n    };\n\n    _this.onSortEnd = function (_ref) {\n      var oldIndex = _ref.oldIndex,\n          newIndex = _ref.newIndex;\n\n      _this.setState(function (_ref2) {\n        var colors = _ref2.colors;\n        return {\n          colors: arrayMove(colors, oldIndex, newIndex)\n        };\n      });\n    };\n\n    _this.state = {\n      open: true,\n      colors: seedColors[0].colors,\n      newPaletteName: ''\n    };\n    _this.addNewColor = _this.addNewColor.bind(_assertThisInitialized(_this));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    _this.removeColor = _this.removeColor.bind(_assertThisInitialized(_this));\n    _this.clearColors = _this.clearColors.bind(_assertThisInitialized(_this));\n    _this.addRandomColor = _this.addRandomColor.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(NewPaletteForm, [{\n    key: \"addNewColor\",\n    value: function addNewColor(newColor) {\n      this.setState({\n        colors: [].concat(_toConsumableArray(this.state.colors), [newColor]),\n        newColorName: \"\"\n      });\n    }\n  }, {\n    key: \"clearColors\",\n    value: function clearColors() {\n      this.setState({\n        colors: []\n      });\n    }\n  }, {\n    key: \"addRandomColor\",\n    value: function addRandomColor() {\n      var allColors = this.props.palettes.map(function (p) {\n        return p.colors;\n      }).flat();\n      var rand;\n      var rabdonCOlor;\n      var isDuplicateColor = true;\n\n      while (is) {\n        Math.floor(Math.random() * allColors.length);\n      }\n\n      var randomColor = allColors[rand];\n      this.setState({\n        colors: [].concat(_toConsumableArray(this.state.colors), [randomColor])\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(newPalette) {\n      newPalette.id = newPalette.paletteName.toLowerCase().replace(/ /g, \"-\");\n      newPalette.colors = this.state.colors;\n      this.props.savePalette(newPalette);\n      this.props.history.push(\"/\");\n    }\n  }, {\n    key: \"removeColor\",\n    value: function removeColor(colorName) {\n      this.setState({\n        colors: this.state.colors.filter(function (color) {\n          return color.name !== colorName;\n        })\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          maxColors = _this$props.maxColors,\n          palettes = _this$props.palettes;\n      var _this$state = this.state,\n          open = _this$state.open,\n          colors = _this$state.colors;\n      var paletteIsFull = colors.length >= maxColors;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(PaletteFormNav, {\n        open: open,\n        palettes: palettes,\n        handleSubmit: this.handleSubmit,\n        handleDrawerOpen: this.handleDrawerOpen,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Drawer, {\n        className: classes.drawer,\n        variant: \"persistent\",\n        anchor: \"left\",\n        open: open,\n        classes: {\n          paper: classes.drawerPaper\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.drawerHeader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(IconButton, {\n        onClick: this.handleDrawerClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(ChevronLeftIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(Divider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }\n      }, \"Design Your Palette\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.buttons,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: this.clearColors,\n        className: classes.button,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }\n      }, \"Clear Palette\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: this.addRandomColor,\n        disabled: paletteIsFull,\n        className: classes.button,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }\n      }, \"Random Color\")), /*#__PURE__*/React.createElement(ColorPickerForm, {\n        paletteIsFull: paletteIsFull,\n        addNewColor: this.addNewColor,\n        colors: colors,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }\n      }))), /*#__PURE__*/React.createElement(\"main\", {\n        className: classNames(classes.content, _defineProperty({}, classes.contentShift, open)),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.drawerHeader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(DraggableColorList, {\n        colors: this.state.colors,\n        removeColor: this.removeColor,\n        axis: \"xy\",\n        onSortEnd: this.onSortEnd,\n        distance: 20,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return NewPaletteForm;\n}(Component);\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/home/edgar/js/color_project/src/NewPaletteForm.js"],"names":["React","Component","PaletteFormNav","classNames","withStyles","Drawer","ColorPickerForm","Typography","Divider","IconButton","ChevronLeftIcon","Button","DraggableColorList","arrayMove","styles","seedColors","NewPaletteForm","props","handleDrawerOpen","setState","open","handleDrawerClose","onSortEnd","oldIndex","newIndex","colors","state","newPaletteName","addNewColor","bind","handleSubmit","removeColor","clearColors","addRandomColor","newColor","newColorName","allColors","palettes","map","p","flat","rand","rabdonCOlor","isDuplicateColor","is","Math","floor","random","length","randomColor","newPalette","id","paletteName","toLowerCase","replace","savePalette","history","push","colorName","filter","color","name","classes","maxColors","paletteIsFull","root","drawer","paper","drawerPaper","drawerHeader","container","buttons","button","content","contentShift","defaultProps","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PaletteFormNav from './PaletteFormNav';\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport ColorPickerForm from './ColorPickerForm';\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport Button from \"@material-ui/core/Button\";\nimport DraggableColorList from './DraggableColorList';\nimport {arrayMove} from 'react-sortable-hoc';\nimport styles from './styles/NewPaletteFormStyles';\nimport seedColors from './seedColors';\n\n\n\nclass NewPaletteForm extends Component {\n  static defaultProps = {\n    maxColors: 20\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: true,\n      colors: seedColors[0].colors,\n      newPaletteName: ''\n    };\n    this.addNewColor = this.addNewColor.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.removeColor = this.removeColor.bind(this);\n    this.clearColors = this.clearColors.bind(this);\n    this.addRandomColor = this.addRandomColor.bind(this);\n  }\n\n  handleDrawerOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleDrawerClose = () => {\n    this.setState({ open: false });\n  };\n\n  addNewColor(newColor) {\n    this.setState({\n      colors: [...this.state.colors, newColor],\n      newColorName: \"\"\n    });\n  }\n\n  clearColors() {\n    this.setState({ colors: [] });\n  }\n  addRandomColor() {\n    const allColors = this.props.palettes.map(p => p.colors).flat();\n    let rand;\n    let rabdonCOlor;\n    let isDuplicateColor = true;\n    while(is)\n    Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    this.setState({ colors: [...this.state.colors, randomColor] });\n  }\n  handleSubmit(newPalette) {\n    newPalette.id = newPalette.paletteName.toLowerCase().replace(/ /g, \"-\");\n    newPalette.colors = this.state.colors;\n    this.props.savePalette(newPalette);\n    this.props.history.push(\"/\");\n  }\n  removeColor(colorName) {\n    this.setState({\n      colors: this.state.colors.filter(color => color.name !== colorName)\n    });\n  };\n  onSortEnd = ({oldIndex,newIndex}) => {\n    this.setState(({colors})=>({\n      colors: arrayMove(colors,oldIndex,newIndex)\n    }));\n  };\n  \n\n  render() {\n    const { classes,maxColors,palettes } = this.props;\n    const { open,colors} = this.state;\n\n    const paletteIsFull = colors.length >= maxColors;\n\n    return (\n      <div className={classes.root}>\n        <PaletteFormNav\n          open={open}\n          palettes={palettes}\n          handleSubmit={this.handleSubmit}\n          handleDrawerOpen={this.handleDrawerOpen}\n        />\n        <Drawer\n          className={classes.drawer}\n          variant=\"persistent\"\n          anchor=\"left\"\n          open={open}\n          classes={{\n            paper: classes.drawerPaper\n          }}\n        >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={this.handleDrawerClose}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Divider />\n          <div className={classes.container} >\n          <Typography variant=\"h4\" gutterBottom>\n            Design Your Palette\n          </Typography>\n          <div className={classes.buttons} >\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={this.clearColors}\n              className={classes.button}\n            >\n              Clear Palette\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.addRandomColor}\n              disabled={paletteIsFull}\n              className={classes.button}\n            >\n              Random Color\n            </Button>\n          </div>\n          <ColorPickerForm \n            paletteIsFull={paletteIsFull} \n            addNewColor={this.addNewColor}\n            colors={colors}\n            />\n          </div>\n        </Drawer>\n        <main\n          className={classNames(classes.content, {\n            [classes.contentShift]: open\n          })}\n        >\n          <div className={classes.drawerHeader} />\n          <DraggableColorList \n            colors={this.state.colors} \n            removeColor={this.removeColor} \n            axis='xy'\n            onSortEnd={this.onSortEnd}\n            distance={20}\n            />\n        </main>\n      </div>\n    );\n  }\n}\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);\n"]},"metadata":{},"sourceType":"module"}