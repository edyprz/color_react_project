{"ast":null,"code":"import _defineProperty from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/edgar/js/color_project/src/PaletteMetaForm.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { Picker } from 'emoji-mart';\nimport 'emoji-mart/css/emoji-mart.css';\n\nvar PaletteMetaForm = /*#__PURE__*/function (_Component) {\n  _inherits(PaletteMetaForm, _Component);\n\n  var _super = _createSuper(PaletteMetaForm);\n\n  function PaletteMetaForm(props) {\n    var _this;\n\n    _classCallCheck(this, PaletteMetaForm);\n\n    _this = _super.call(this, props);\n\n    _this.handleClickOpen = function () {\n      _this.setState({\n        open: true\n      });\n    };\n\n    _this.handleClose = function () {\n      _this.setState({\n        open: false\n      });\n    };\n\n    _this.state = {\n      stage: 'form',\n      newPaletteName: ''\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.showEmojiPicker = _this.showEmojiPicker.bind(_assertThisInitialized(_this));\n    _this.savePalette = _this.savePalette.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(PaletteMetaForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      ValidatorForm.addValidationRule('isPaletteNameUnique', function (value) {\n        return _this2.props.palettes.every(function (_ref) {\n          var paletteName = _ref.paletteName;\n          return paletteName.toLowerCase() !== value.toLowerCase();\n        });\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(evt) {\n      this.setState(_defineProperty({}, evt.target.name, evt.target.value));\n    }\n  }, {\n    key: \"savePalette\",\n    value: function savePalette(emoji) {\n      var newPalette = {\n        paletteName: this.state.newPaletteName,\n        emoji: emoji.native\n      };\n      this.props.handleSubmit(newPalette);\n      this.setState({\n        stage: 'emoji'\n      });\n    }\n  }, {\n    key: \"showEmojiPicker\",\n    value: function showEmojiPicker() {\n      this.setState({\n        stage: 'emoji'\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var newPaletteName = this.state.newPaletteName;\n      var _this$props = this.props,\n          hideForm = _this$props.hideForm,\n          handleSubmit = _this$props.handleSubmit;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Dialog, {\n        open: this.state.stage === 'emoji',\n        onClose: hideForm,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DialogTitle, {\n        id: \"form-dialog-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }\n      }, \"Chooose a Palette Emoji\"), /*#__PURE__*/React.createElement(Picker, {\n        onSelect: this.savePalette,\n        title: \"Pick a Palette Name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Dialog, {\n        open: this.state.stage === 'form',\n        \"aria-labelledby\": \"form-dialog-title\",\n        onClose: hideForm,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DialogTitle, {\n        id: \"form-dialog-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }\n      }, \"Chooose a Palette Name\"), /*#__PURE__*/React.createElement(ValidatorForm, {\n        onSubmit: this.showEmojiPicker,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(DialogContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(DialogContentText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }\n      }, \"Please enter a name for your beautiful palette.Make sure its unique.\"), /*#__PURE__*/React.createElement(TextValidator, {\n        label: \"Palette Name\",\n        value: newPaletteName,\n        name: \"newPaletteName\",\n        onChange: this.handleChange,\n        fullWidth: true,\n        margin: \"normal\",\n        validators: ['required', 'isPaletteNameUnique'],\n        errorMessages: ['Enter Palette Name', 'Name already taken!'],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(DialogActions, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: hideForm,\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }\n      }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }\n      }, \"Save Palette\")))));\n    }\n  }]);\n\n  return PaletteMetaForm;\n}(Component);\n\nexport default PaletteMetaForm;","map":{"version":3,"sources":["/home/edgar/js/color_project/src/PaletteMetaForm.js"],"names":["React","Component","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","ValidatorForm","TextValidator","Picker","PaletteMetaForm","props","handleClickOpen","setState","open","handleClose","state","stage","newPaletteName","handleChange","bind","showEmojiPicker","savePalette","addValidationRule","value","palettes","every","paletteName","toLowerCase","evt","target","name","emoji","newPalette","native","handleSubmit","hideForm"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {ValidatorForm,TextValidator} from 'react-material-ui-form-validator';\nimport {Picker} from 'emoji-mart';\nimport 'emoji-mart/css/emoji-mart.css';\n\nclass PaletteMetaForm extends Component {\n  constructor(props){\n    super(props);\n      this.state = {\n        stage: 'form',\n        newPaletteName: ''\n      };\n      this.handleChange = this.handleChange.bind(this);\n      this.showEmojiPicker = this.showEmojiPicker.bind(this);\n      this.savePalette = this.savePalette.bind(this);\n    }\n\n  componentDidMount(){\n    ValidatorForm.addValidationRule('isPaletteNameUnique', value => \n      this.props.palettes.every(\n        ({paletteName}) => paletteName.toLowerCase() !== value.toLowerCase()\n      )\n    );\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name] : evt.target.value\n    });\n  }\n  savePalette(emoji){\n    const newPalette = {\n      paletteName: this.state.newPaletteName,\n      emoji: emoji.native\n    };\n    this.props.handleSubmit(newPalette);\n    this.setState({stage:'emoji'});\n\n  }\n    handleClickOpen = () => {\n      this.setState({open:true});\n    };\n  \n    handleClose = () => {\n      this.setState({open:false});\n    };\n    showEmojiPicker(){\n      this.setState({stage:'emoji'});\n    }\n\n  render(){\n\n    const {newPaletteName} = this.state;\n    const {hideForm,handleSubmit} = this.props;\n\n    return (\n      <div>\n        <Dialog open={this.state.stage === 'emoji'} onClose={hideForm} >\n          <DialogTitle id=\"form-dialog-title\">Chooose a Palette Emoji</DialogTitle>\n          <Picker \n            onSelect={this.savePalette} \n            title='Pick a Palette Name'\n          />\n        </Dialog>\n        <Dialog \n          open={this.state.stage === 'form'} \n          aria-labelledby=\"form-dialog-title\" \n          onClose={hideForm}>\n          <DialogTitle id=\"form-dialog-title\">Chooose a Palette Name</DialogTitle>\n          <ValidatorForm \n            onSubmit={this.showEmojiPicker}>\n          <DialogContent>\n            <DialogContentText>\n              Please enter a name for your beautiful palette.Make sure its unique.\n            </DialogContentText>\n                <TextValidator\n                label='Palette Name'\n                value={newPaletteName}\n                name='newPaletteName'\n                onChange={this.handleChange}\n                fullWidth\n                margin='normal'\n                validators={['required','isPaletteNameUnique']}\n                errorMessages={['Enter Palette Name','Name already taken!']}\n                />\n \n          </DialogContent>\n          <DialogActions>\n            <Button onClick={hideForm} color=\"primary\" >\n              Cancel\n            </Button>\n            <Button \n              variant=\"contained\" \n              color=\"primary\" \n              type=\"submit\"\n            >\n              Save Palette\n            </Button>\n          </DialogActions>\n          </ValidatorForm>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nexport default PaletteMetaForm;"]},"metadata":{},"sourceType":"module"}