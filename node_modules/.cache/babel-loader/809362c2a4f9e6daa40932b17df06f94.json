{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport chroma from \"chroma-js\";\nvar levels = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\n\nfunction generatePalette(starterPalette) {\n  var newPalette = {\n    paletteName: starterPalette.paletteName,\n    id: starterPalette.id,\n    emoji: starterPalette.emoji,\n    colors: {}\n  };\n\n  var _iterator = _createForOfIteratorHelper(levels),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var level = _step.value;\n      newPalette.colors[level] = [];\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(starterPalette.colors),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var color = _step2.value;\n      var scale = getScale(color.color, 10).reverse();\n\n      for (var i in scale) {\n        newPalette.colors[levels[i]].push({\n          name: \"\".concat(color.name, \" \").concat(levels[i]),\n          id: color.name.toLowerCase().replace(/ /g, \"-\"),\n          hex: scale[i],\n          rgb: chroma(scale[i]).css(),\n          rgba: chroma(scale[i]).css().replace(\"rgb\", \"rgba\").replace(\")\", \",2.0)\")\n        });\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return newPalette;\n}\n\nfunction getRange(hexColor) {\n  var end = \"#fff\";\n  return [chroma(hexColor).darken(1.4).hex(), hexColor, end];\n}\n\nfunction getScale(hexColor, numberOfColors) {\n  return chroma.scale(getRange(hexColor)).mode(\"lab\").colors(numberOfColors);\n}\n\nexport { generatePalette };","map":{"version":3,"sources":["/home/edgar/js/color_project/src/colorHelpers.js"],"names":["chroma","levels","generatePalette","starterPalette","newPalette","paletteName","id","emoji","colors","level","color","scale","getScale","reverse","i","push","name","toLowerCase","replace","hex","rgb","css","rgba","getRange","hexColor","end","darken","numberOfColors","mode"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,IAAMC,MAAM,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,EAAwC,GAAxC,EAA6C,GAA7C,CAAf;;AAEA,SAASC,eAAT,CAAyBC,cAAzB,EAAyC;AACvC,MAAIC,UAAU,GAAG;AACfC,IAAAA,WAAW,EAAEF,cAAc,CAACE,WADb;AAEfC,IAAAA,EAAE,EAAEH,cAAc,CAACG,EAFJ;AAGfC,IAAAA,KAAK,EAAEJ,cAAc,CAACI,KAHP;AAIfC,IAAAA,MAAM,EAAE;AAJO,GAAjB;;AADuC,6CAOrBP,MAPqB;AAAA;;AAAA;AAOvC,wDAA0B;AAAA,UAAjBQ,KAAiB;AACxBL,MAAAA,UAAU,CAACI,MAAX,CAAkBC,KAAlB,IAA2B,EAA3B;AACD;AATsC;AAAA;AAAA;AAAA;AAAA;;AAAA,8CAUrBN,cAAc,CAACK,MAVM;AAAA;;AAAA;AAUvC,2DAAyC;AAAA,UAAhCE,KAAgC;AACvC,UAAIC,KAAK,GAAGC,QAAQ,CAACF,KAAK,CAACA,KAAP,EAAc,EAAd,CAAR,CAA0BG,OAA1B,EAAZ;;AACA,WAAK,IAAIC,CAAT,IAAcH,KAAd,EAAqB;AACnBP,QAAAA,UAAU,CAACI,MAAX,CAAkBP,MAAM,CAACa,CAAD,CAAxB,EAA6BC,IAA7B,CAAkC;AAChCC,UAAAA,IAAI,YAAKN,KAAK,CAACM,IAAX,cAAmBf,MAAM,CAACa,CAAD,CAAzB,CAD4B;AAEhCR,UAAAA,EAAE,EAAEI,KAAK,CAACM,IAAN,CAAWC,WAAX,GAAyBC,OAAzB,CAAiC,IAAjC,EAAuC,GAAvC,CAF4B;AAGhCC,UAAAA,GAAG,EAAER,KAAK,CAACG,CAAD,CAHsB;AAIhCM,UAAAA,GAAG,EAAEpB,MAAM,CAACW,KAAK,CAACG,CAAD,CAAN,CAAN,CAAiBO,GAAjB,EAJ2B;AAKhCC,UAAAA,IAAI,EAAEtB,MAAM,CAACW,KAAK,CAACG,CAAD,CAAN,CAAN,CACHO,GADG,GAEHH,OAFG,CAEK,KAFL,EAEY,MAFZ,EAGHA,OAHG,CAGK,GAHL,EAGU,OAHV;AAL0B,SAAlC;AAUD;AACF;AAxBsC;AAAA;AAAA;AAAA;AAAA;;AAyBvC,SAAOd,UAAP;AACD;;AAED,SAASmB,QAAT,CAAkBC,QAAlB,EAA4B;AAC1B,MAAMC,GAAG,GAAG,MAAZ;AACA,SAAO,CACLzB,MAAM,CAACwB,QAAD,CAAN,CACGE,MADH,CACU,GADV,EAEGP,GAFH,EADK,EAILK,QAJK,EAKLC,GALK,CAAP;AAOD;;AAED,SAASb,QAAT,CAAkBY,QAAlB,EAA4BG,cAA5B,EAA4C;AAC1C,SAAO3B,MAAM,CACVW,KADI,CACEY,QAAQ,CAACC,QAAD,CADV,EAEJI,IAFI,CAEC,KAFD,EAGJpB,MAHI,CAGGmB,cAHH,CAAP;AAID;;AAED,SAASzB,eAAT","sourcesContent":["import chroma from \"chroma-js\";\nconst levels = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\n\nfunction generatePalette(starterPalette) {\n  let newPalette = {\n    paletteName: starterPalette.paletteName,\n    id: starterPalette.id,\n    emoji: starterPalette.emoji,\n    colors: {}\n  };\n  for (let level of levels) {\n    newPalette.colors[level] = [];\n  }\n  for (let color of starterPalette.colors) {\n    let scale = getScale(color.color, 10).reverse();\n    for (let i in scale) {\n      newPalette.colors[levels[i]].push({\n        name: `${color.name} ${levels[i]}`,\n        id: color.name.toLowerCase().replace(/ /g, \"-\"),\n        hex: scale[i],\n        rgb: chroma(scale[i]).css(),\n        rgba: chroma(scale[i])\n          .css()\n          .replace(\"rgb\", \"rgba\")\n          .replace(\")\", \",2.0)\")\n      });\n    }\n  }\n  return newPalette;\n}\n\nfunction getRange(hexColor) {\n  const end = \"#fff\";\n  return [\n    chroma(hexColor)\n      .darken(1.4)\n      .hex(),\n    hexColor,\n    end\n  ];\n}\n\nfunction getScale(hexColor, numberOfColors) {\n  return chroma\n    .scale(getRange(hexColor))\n    .mode(\"lab\")\n    .colors(numberOfColors);\n}\n\nexport { generatePalette };\n"]},"metadata":{},"sourceType":"module"}