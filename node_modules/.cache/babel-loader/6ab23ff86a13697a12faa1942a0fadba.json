{"ast":null,"code":"import _defineProperty from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/edgar/js/color_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/edgar/js/color_project/src/ColorPickerForm.js\";\nimport React, { Component } from 'react';\nimport Button from \"@material-ui/core/Button\";\nimport { ChromePicker } from \"react-color\";\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from './styles/ColorPickerFormStyles';\n\nvar ColorPickerForm = /*#__PURE__*/function (_Component) {\n  _inherits(ColorPickerForm, _Component);\n\n  var _super = _createSuper(ColorPickerForm);\n\n  function ColorPickerForm(props) {\n    var _this;\n\n    _classCallCheck(this, ColorPickerForm);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      currentColor: 'teal',\n      newColorName: \"\"\n    };\n    _this.updateCurrentColor = _this.updateCurrentColor.bind(_assertThisInitialized(_this));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ColorPickerForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      ValidatorForm.addValidationRule('isColorNameUnique', function (value) {\n        return _this2.props.colors.every(function (_ref) {\n          var name = _ref.name;\n          return name.toLowerCase() !== value.toLowerCase();\n        });\n      });\n      ValidatorForm.addValidationRule('isColorUnique', function (value) {\n        return _this2.props.colors.every(function (_ref2) {\n          var color = _ref2.color;\n          return color.toLowerCase() !== _this2.state.currentColor;\n        });\n      });\n    }\n  }, {\n    key: \"updateCurrentColor\",\n    value: function updateCurrentColor(newColor) {\n      this.setState({\n        currentColor: newColor.hex\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(evt) {\n      this.setState(_defineProperty({}, evt.target.name, evt.target.value));\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var newColor = {\n        color: this.state.currentColor,\n        name: this.state.newColorName\n      };\n      this.props.addNewColor(newColor);\n      this.setState({\n        newColorName: \"\"\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          paletteIsFull = _this$props.paletteIsFull,\n          classes = _this$props.classes;\n      var _this$state = this.state,\n          currentColor = _this$state.currentColor,\n          newColorName = _this$state.newColorName;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ChromePicker, {\n        color: currentColor,\n        onChangeComplete: this.updateCurrentColor,\n        className: classes.picker,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(ValidatorForm, {\n        onSubmit: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        value: newColorName,\n        className: classes.colorNameInput,\n        placeholder: \"Color Name\",\n        variant: \"filled\",\n        margin: \"normal\",\n        name: \"newColorName\",\n        onChange: this.handleChange,\n        validators: ['required', 'isColorNameUnique', 'isColorUnique'],\n        errorMessages: ['this field is required', 'Color name must be unique', 'Color already usedÂ¡'],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        type: \"submit\",\n        color: \"primary\",\n        disabled: paletteIsFull,\n        className: classes.addColor,\n        style: {\n          backgroundColor: paletteIsFull ? 'grey' : currentColor\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }\n      }, paletteIsFull ? 'Palette Full' : 'Add Color')));\n    }\n  }]);\n\n  return ColorPickerForm;\n}(Component);\n\nexport default withStyles(styles)(ColorPickerForm);","map":{"version":3,"sources":["/home/edgar/js/color_project/src/ColorPickerForm.js"],"names":["React","Component","Button","ChromePicker","ValidatorForm","TextValidator","withStyles","styles","ColorPickerForm","props","state","currentColor","newColorName","updateCurrentColor","bind","handleChange","handleSubmit","addValidationRule","value","colors","every","name","toLowerCase","color","newColor","setState","hex","evt","target","addNewColor","paletteIsFull","classes","picker","colorNameInput","addColor","backgroundColor"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Button from \"@material-ui/core/Button\";\nimport { ChromePicker } from \"react-color\";\nimport {ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from './styles/ColorPickerFormStyles';\n\n\nclass ColorPickerForm extends Component{\n\n  constructor(props){\n    super(props);\n    this.state = {currentColor : 'teal',newColorName: \"\",\n  };\n    this.updateCurrentColor = this.updateCurrentColor.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount(){\n    ValidatorForm.addValidationRule('isColorNameUnique', value => \n        this.props.colors.every(\n          ({name}) => name.toLowerCase() !== value.toLowerCase()\n        )\n    );\n    ValidatorForm.addValidationRule('isColorUnique', value => \n      this.props.colors.every(\n        ({color}) => color.toLowerCase() !== this.state.currentColor\n      )\n    );\n  }\n\n  updateCurrentColor(newColor) {\n    this.setState({ currentColor: newColor.hex });\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name] : evt.target.value\n    });\n  }\n  handleSubmit(){\n    const newColor = {\n      color: this.state.currentColor,\n      name: this.state.newColorName\n    };\n    this.props.addNewColor(newColor);\n    this.setState({newColorName: \"\"});\n  }\n  render(){\n\n    const {paletteIsFull,classes} = this.props;\n    const {currentColor,newColorName} = this.state;\n\n    return(\n      <div>\n          <ChromePicker\n            color={currentColor}\n            onChangeComplete={this.updateCurrentColor}\n            className={classes.picker}\n          />\n          <ValidatorForm \n          onSubmit={this.handleSubmit}>\n            <TextValidator \n              value={newColorName}\n              className={classes.colorNameInput}\n              placeholder='Color Name'\n              variant='filled'\n              margin='normal'\n              name='newColorName' \n              onChange={this.handleChange}\n              validators={['required','isColorNameUnique','isColorUnique']}\n              errorMessages={['this field is required','Color name must be unique','Color already usedÂ¡']}\n              />\n            <Button\n              variant=\"contained\"\n              type=\"submit\"\n              color=\"primary\"\n              disabled={paletteIsFull}\n              className={classes.addColor}\n              style={{\n                backgroundColor: paletteIsFull\n                ? 'grey'\n                : currentColor\n              }}\n            >\n              {paletteIsFull ? 'Palette Full' : 'Add Color'}\n            </Button>\n          </ValidatorForm>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(ColorPickerForm);"]},"metadata":{},"sourceType":"module"}